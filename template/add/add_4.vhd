-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity {{prefix}}_simd_add_4{{suffix}} is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    a0_val : IN STD_LOGIC_VECTOR (11 downto 0);
    b0_val : IN STD_LOGIC_VECTOR (11 downto 0);
    a1_val : IN STD_LOGIC_VECTOR (11 downto 0);
    b1_val : IN STD_LOGIC_VECTOR (11 downto 0);
    a2_val : IN STD_LOGIC_VECTOR (11 downto 0);
    b2_val : IN STD_LOGIC_VECTOR (11 downto 0);
    a3_val : IN STD_LOGIC_VECTOR (11 downto 0);
    b3_val : IN STD_LOGIC_VECTOR (11 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (11 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (11 downto 0);
    ap_ce : IN STD_LOGIC := '1');

    attribute use_dsp : string;
    attribute use_simd : string;
    attribute use_mult : string;
    attribute use_dsp of {{prefix}}_simd_add_4{{suffix}}: entity is "simd";
    attribute use_simd of {{prefix}}_simd_add_4{{suffix}}: entity is "four12";
    attribute use_mult of {{prefix}}_simd_add_4{{suffix}}: entity is "none";
end;

architecture behav of {{prefix}}_simd_add_4{{suffix}} is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;

    attribute shreg_extract : string;
    signal add_ln25_fu_80_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln25_reg_124 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln26_fu_86_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln26_reg_129 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln27_fu_92_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln27_reg_134 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln28_fu_98_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln28_reg_139 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;
    signal ap_return_0_int_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_return_1_int_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_return_2_int_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_return_3_int_reg : STD_LOGIC_VECTOR (11 downto 0);
begin
    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1))) then
                add_ln25_reg_124 <= add_ln25_fu_80_p2;
                add_ln26_reg_129 <= add_ln26_fu_86_p2;
                add_ln27_reg_134 <= add_ln27_fu_92_p2;
                add_ln28_reg_139 <= add_ln28_fu_98_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_0_int_reg <= add_ln25_reg_124;
                ap_return_1_int_reg <= add_ln26_reg_129;
                ap_return_2_int_reg <= add_ln27_reg_134;
                ap_return_3_int_reg <= add_ln28_reg_139;
            end if;
        end if;
    end process;
    add_ln25_fu_80_p2 <= std_logic_vector(unsigned(b0_val) + unsigned(a0_val));
    add_ln26_fu_86_p2 <= std_logic_vector(unsigned(b1_val) + unsigned(a1_val));
    add_ln27_fu_92_p2 <= std_logic_vector(unsigned(b2_val) + unsigned(a2_val));
    add_ln28_fu_98_p2 <= std_logic_vector(unsigned(b3_val) + unsigned(a3_val));
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_0_assign_proc : process(add_ln25_reg_124, ap_ce_reg, ap_return_0_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_0 <= ap_return_0_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_0 <= add_ln25_reg_124;
        else 
            ap_return_0 <= "XXXXXXXXXXXX";
        end if; 
    end process;

    ap_return_1_assign_proc : process(add_ln26_reg_129, ap_ce_reg, ap_return_1_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_1 <= ap_return_1_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_1 <= add_ln26_reg_129;
        else 
            ap_return_1 <= "XXXXXXXXXXXX";
        end if; 
    end process;

    ap_return_2_assign_proc : process(add_ln27_reg_134, ap_ce_reg, ap_return_2_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_2 <= ap_return_2_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_2 <= add_ln27_reg_134;
        else 
            ap_return_2 <= "XXXXXXXXXXXX";
        end if; 
    end process;

    ap_return_3_assign_proc : process(add_ln28_reg_139, ap_ce_reg, ap_return_3_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_3 <= ap_return_3_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_3 <= add_ln28_reg_139;
        else 
            ap_return_3 <= "XXXXXXXXXXXX";
        end if; 
    end process;
end behav;
